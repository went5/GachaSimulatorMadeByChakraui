{"version":3,"sources":["presentational/header/ChakraHeader.tsx","hooks/use-gacha.ts","presentational/table/ChakraTable.tsx","presentational/button/ChakraButton.tsx","atoms/states.ts","presentational/numberinput/ChakraNumberInput.tsx","containers/Gacha.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChakraHeader","as","align","justify","wrap","pt","pb","mb","bg","color","borderBottomWidth","mr","GiPresent","w","h","size","letterSpacing","useGacha","prob","onceStone","onceMoney","spark","points","useState","totalGachas","setTotalGachas","totalStone","setTotalStone","totalMoney","setTotalMoney","probability","totalNum","getPoints","rand","Math","random","num","ChakraTable","trialsNum","variant","isNumeric","ChakraButton","calc","colorScheme","onClick","inputState","atomFamily","key","default","pointState","atom","ChakraNumberInput","setValue","min","max","dV","onChange","value","Number","defaultValue","CalcGacha","useRecoilState","setProb","setOnceStone","setOnceMoney","setSpark","setPoints","totalGatchas","mt","App","ml","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRA0BeA,EAtBM,kBACnB,cAAC,IAAD,CACEC,GAAG,MACHC,MAAM,SACNC,QAAQ,gBACRC,KAAK,OACLC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAG,QACHC,MAAM,QACNC,kBAAkB,MAVpB,SAYE,eAAC,IAAD,CAAMR,MAAM,SAASS,GAAI,EAAzB,UACE,cAAC,IAAD,CAAMV,GAAIW,IAAWC,EAAG,EAAGC,EAAG,EAAGL,MAAM,QACvC,cAAC,IAAD,CAASR,GAAG,KAAKc,KAAK,KAAKC,cAAe,UAA1C,mC,OC6BSC,EA9CE,SACfC,EACAC,EACAC,EACAC,EACAC,GAGA,MAAsCC,mBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAoCF,mBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACMC,EAAqB,IAAPZ,EAgCpB,MAAO,CAACM,EAAaE,EAAYE,EA/BpB,WACX,IAAIG,EAAW,EACXC,EAAY,EAChBP,GAAe,WACb,GAAIK,GAAe,EACjB,OAAO,EAET,KAAOE,EAAYV,GAAQ,CACzB,IAAIW,EAAOC,KAAKC,SACZF,GAAQH,GACVC,IAGF,IADA,IAAIK,EAAM,EACHH,EAAOH,KACRM,GAAOf,GAAmB,IAAVA,IAGpBY,EAAOC,KAAKC,SACZC,IAEFL,GAAYK,EACZJ,IAEF,OAAOD,KAETJ,GAAc,kBAAMI,EAAWZ,KAC/BU,GAAc,kBAAME,EAAWX,Q,QCZpBiB,EArBV,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWZ,EAAd,EAAcA,WAAYE,EAA1B,EAA0BA,WAA1B,OACH,eAAC,IAAD,CAAOW,QAAQ,UAAf,UACE,cAAC,IAAD,+BAEA,eAAC,IAAD,WACE,eAAC,IAAD,WACE,cAAC,IAAD,uCACA,eAAC,IAAD,CAAIC,WAAS,EAAb,UAAeF,GAAwB,EAAvC,eAEF,eAAC,IAAD,WACE,cAAC,IAAD,6CACA,eAAC,IAAD,CAAIE,WAAS,EAAb,UAAed,GAA0B,EAAzC,eAEF,eAAC,IAAD,WACE,cAAC,IAAD,uCACA,eAAC,IAAD,CAAIc,WAAS,EAAb,UAAeZ,GAA0B,EAAzC,sB,2BCPOa,EARkB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAClC,OACE,cAAC,IAAD,CAAQ7B,EAAE,OAAO8B,YAAY,OAAOC,QAASF,EAA7C,2B,QCPSG,EAAaC,YAA0B,CAClDC,IAAK,cACLC,QAAS,IAGEC,EAAaC,YAAa,CACrCH,IAAK,SACLC,QAAS,I,SCmBIG,EAhBV,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,IAAIC,EAAS,EAATA,GACzB,OACE,eAAC,IAAD,CACEC,SAAU,SAACC,GACTL,EAASM,OAAOD,KAElBH,IAAKA,EACLK,aAAcJ,EACdF,IAAKA,EANP,UAQE,cAAC,IAAD,IACA,cAAC,IAAD,QC4CSO,EA1DG,WAChB,MAAwBC,YAAehB,EAAW,gBAAlD,mBAAO3B,EAAP,KAAa4C,EAAb,KACA,EAAkCD,YAAehB,EAAW,cAA5D,mBAAO1B,EAAP,KAAkB4C,EAAlB,KACA,EAAkCF,YAAehB,EAAW,cAA5D,mBAAOzB,EAAP,KAAkB4C,EAAlB,KACA,EAA0BH,YAAehB,EAAW,UAApD,mBAAOxB,EAAP,KAAc4C,EAAd,KACA,EAA4BJ,YAAeZ,GAA3C,mBAAO3B,EAAP,KAAe4C,EAAf,KACA,EAAqDjD,EACnDC,EACAC,EACAC,EACAC,EACAC,GALF,mBAAO6C,EAAP,KAAqBzC,EAArB,KAAiCE,EAAjC,KAA6Cc,EAA7C,KAQA,OACE,eAAC,IAAD,WACE,cAAC,EAAD,CACEJ,UAAW6B,EACXzC,WAAYA,EACZE,WAAYA,IAEd,eAAC,IAAD,CAAMwC,GAAI,IAAV,UACE,cAAC,IAAD,CAAQvD,EAAE,QAAQL,GAAG,UAArB,SACE,cAAC,IAAD,CAAMC,MAAO,QAAb,+BAEF,cAAC,EAAD,CAAmB2C,SAAUU,EAAST,IAAK,EAAGC,IAAK,SAErD,eAAC,IAAD,CAAMc,GAAI,IAAV,UACE,cAAC,IAAD,CAAQvD,EAAE,QAAQL,GAAG,UAArB,SACE,cAAC,IAAD,CAAMC,MAAO,QAAb,qDAEF,cAAC,EAAD,CAAmB2C,SAAUW,EAAcV,IAAK,OAElD,eAAC,IAAD,CAAMe,GAAI,IAAV,UACE,cAAC,IAAD,CAAQvD,EAAE,QAAQL,GAAG,UAArB,SACE,cAAC,IAAD,CAAMC,MAAO,QAAb,+CAEF,cAAC,EAAD,CAAmB2C,SAAUY,EAAcX,IAAK,OAElD,eAAC,IAAD,CAAMe,GAAI,IAAV,UACE,cAAC,IAAD,CAAQvD,EAAE,QAAQL,GAAG,UAArB,SACE,cAAC,IAAD,CAAMC,MAAO,QAAb,0DAEF,cAAC,EAAD,CAAmB2C,SAAUa,EAAUZ,IAAK,OAE9C,eAAC,IAAD,CAAMe,GAAI,IAAV,UACE,cAAC,IAAD,CAAQvD,EAAE,QAAQL,GAAG,UAArB,SACE,cAAC,IAAD,CAAMC,MAAO,QAAb,wCAEF,cAAC,EAAD,CAAmB2C,SAAUc,EAAWX,GAAI,OAE9C,cAAC,IAAD,CAAKa,GAAI,GAAIvD,EAAE,OAAf,SACE,cAAC,EAAD,CAAc6B,KAAMA,UCzCb2B,EAbH,WACV,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAK1D,GAAI,EAAG2D,GAAI,EAAhB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,YCCKC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0f7dd4ce.chunk.js","sourcesContent":["import React from \"react\";\nimport { Flex, Heading, Icon } from \"@chakra-ui/react\";\nimport { GiPresent } from \"react-icons/gi\";\n\nconst ChakraHeader = () => (\n  <Flex\n    as=\"nav\"\n    align=\"center\"\n    justify=\"space-between\"\n    wrap=\"wrap\"\n    pt={6}\n    pb={6}\n    mb={6}\n    bg=\"white\"\n    color=\"black\"\n    borderBottomWidth=\"1px\"\n  >\n    <Flex align=\"center\" mr={5}>\n      <Icon as={GiPresent} w={8} h={8} color=\"red\" />\n      <Heading as=\"h1\" size=\"lg\" letterSpacing={\"tighter\"}>\n        Gacha Simulator\n      </Heading>\n    </Flex>\n  </Flex>\n);\n\nexport default ChakraHeader;\n","import { useState } from \"react\";\n\nconst useGacha = (\n  prob: number,\n  onceStone: number,\n  onceMoney: number,\n  spark: number,\n  points: number\n): [number, number, number, () => void] => {\n  // 確率を受け取り、ガチャ回数を返す\n  const [totalGachas, setTotalGachas] = useState(0);\n  const [totalStone, setTotalStone] = useState(0);\n  const [totalMoney, setTotalMoney] = useState(0);\n  const probability = prob * 0.01;\n  const calc = () => {\n    var totalNum = 0;\n    var getPoints = 0;\n    setTotalGachas(() => {\n      if (probability <= 0) {\n        return 0;\n      }\n      while (getPoints < points) {\n        var rand = Math.random();\n        if (rand <= probability) {\n          totalNum++;\n        }\n        var num = 0;\n        while (rand > probability) {\n          if (num >= spark && spark !== 0) {\n            break;\n          }\n          rand = Math.random();\n          num++;\n        }\n        totalNum += num;\n        getPoints++;\n      }\n      return totalNum;\n    });\n    setTotalStone(() => totalNum * onceStone);\n    setTotalMoney(() => totalNum * onceMoney);\n  };\n  // 最新の値が取れていない\n\n  //const calcTotalStone = () => setTotalStone(() => totalGachas * onceStone);\n  return [totalGachas, totalStone, totalMoney, calc];\n};\n\nexport default useGacha;\n","import React, { VFC } from \"react\";\nimport { TableCaption, Table, Tr, Td, Tbody } from \"@chakra-ui/react\";\n\nconst ChakraTable: VFC<{\n  trialsNum: number;\n  totalStone: number;\n  totalMoney: number;\n}> = ({ trialsNum, totalStone, totalMoney }) => (\n  <Table variant=\"striped\">\n    <TableCaption>Created by Went5</TableCaption>\n\n    <Tbody>\n      <Tr>\n        <Td>試行回数</Td>\n        <Td isNumeric>{trialsNum ? trialsNum : 0}回</Td>\n      </Tr>\n      <Tr>\n        <Td>合計課金石</Td>\n        <Td isNumeric>{totalStone ? totalStone : 0}個</Td>\n      </Tr>\n      <Tr>\n        <Td>合計金額</Td>\n        <Td isNumeric>{totalMoney ? totalMoney : 0}円</Td>\n      </Tr>\n    </Tbody>\n  </Table>\n);\n\nexport default ChakraTable;\n","import React, { VFC } from \"react\";\nimport { Button } from \"@chakra-ui/react\";\n\ntype Props = {\n  calc: () => void;\n};\n\nconst ChakraButton: VFC<Props> = ({ calc }) => {\n  return (\n    <Button w=\"100%\" colorScheme=\"blue\" onClick={calc}>\n      引く\n    </Button>\n  );\n};\n\nexport default ChakraButton;\n","import { atom,atomFamily } from \"recoil\";\n\nexport const inputState = atomFamily<number,string>({\n  key: \"probability\",\n  default: 0,\n});\n\nexport const pointState = atom<number>({\n  key: \"points\",\n  default: 1,\n});","import React, { VFC } from \"react\";\nimport {\n  NumberInputField,\n  NumberInputStepper,\n  NumberInput,\n} from \"@chakra-ui/react\";\n\nconst ChakraNumberInput: VFC<{\n  setValue: (p: number) => void;\n  min?: number;\n  max?: number;\n  dV?: number;\n}> = ({ setValue, min, max,dV }) => {\n  return (\n    <NumberInput\n      onChange={(value) => {\n        setValue(Number(value));\n      }}\n      max={max ?? max}\n      defaultValue={dV ?? dV}\n      min={min ?? min}\n    >\n      <NumberInputField />\n      <NumberInputStepper></NumberInputStepper>\n    </NumberInput>\n  );\n};\n\nexport default ChakraNumberInput;\n","import React from \"react\";\nimport useGacha from \"../hooks/use-gacha\";\nimport ChakraTable from \"../presentational/table/ChakraTable\";\nimport { Box, Flex, Center, Text } from \"@chakra-ui/react\";\nimport ChakraButton from \"../presentational/button/ChakraButton\";\nimport { useRecoilState } from \"recoil\";\nimport { inputState,pointState } from \"../atoms/states\";\nimport ChakraNumberInput from \"../presentational/numberinput/ChakraNumberInput\";\n\nconst CalcGacha = () => {\n  const [prob, setProb] = useRecoilState(inputState(\"probability\"));\n  const [onceStone, setOnceStone] = useRecoilState(inputState(\"onceStone\"));\n  const [onceMoney, setOnceMoney] = useRecoilState(inputState(\"onceMoney\"));\n  const [spark, setSpark] = useRecoilState(inputState(\"spark\"));\n  const [points, setPoints] = useRecoilState(pointState);\n  const [totalGatchas, totalStone, totalMoney, calc] = useGacha(\n    prob,\n    onceStone,\n    onceMoney,\n    spark,\n    points\n  );\n\n  return (\n    <Box>\n      <ChakraTable\n        trialsNum={totalGatchas}\n        totalStone={totalStone}\n        totalMoney={totalMoney}\n      />\n      <Flex mt={2.5}>\n        <Center w=\"150px\" bg=\"red.500\">\n          <Text color={\"white\"}>確率(%)</Text>\n        </Center>\n        <ChakraNumberInput setValue={setProb} min={0} max={100}/>\n      </Flex>\n      <Flex mt={2.5}>\n        <Center w=\"150px\" bg=\"red.500\">\n          <Text color={\"white\"}>1回分の課金石</Text>\n        </Center>\n        <ChakraNumberInput setValue={setOnceStone} min={0}/>\n      </Flex>\n      <Flex mt={2.5}>\n        <Center w=\"150px\" bg=\"red.500\">\n          <Text color={\"white\"}>1回分の値段</Text>\n        </Center>\n        <ChakraNumberInput setValue={setOnceMoney} min={0}/>\n      </Flex>\n      <Flex mt={2.5}>\n        <Center w=\"150px\" bg=\"red.500\">\n          <Text color={\"white\"}>天井までの回数</Text>\n        </Center>\n        <ChakraNumberInput setValue={setSpark} min={0} />\n      </Flex>\n      <Flex mt={2.5}>\n        <Center w=\"150px\" bg=\"red.500\">\n          <Text color={\"white\"}>獲得個数</Text>\n        </Center>\n        <ChakraNumberInput setValue={setPoints} dV={1}/>\n      </Flex>\n      <Box mt={10} w=\"100%\">\n        <ChakraButton calc={calc} />\n      </Box>\n    </Box>\n  );\n};\n\nexport default CalcGacha;\n","import React from \"react\";\nimport \"./App.css\";\nimport { ChakraProvider, Box } from '@chakra-ui/react';\nimport ChakraHeader from \"./presentational/header/ChakraHeader\";\nimport CalcGacha from \"./containers/Gacha\";\nimport { RecoilRoot } from \"recoil\";\n\nconst App = () => {\n  return (\n    <RecoilRoot>\n      <ChakraProvider>\n        <Box mr={5} ml={5}>\n          <ChakraHeader />\n          <CalcGacha />\n        </Box>\n      </ChakraProvider>\n    </RecoilRoot>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}