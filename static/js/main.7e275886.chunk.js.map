{"version":3,"sources":["presentational/header/ChakraHeader.tsx","hooks/use-gacha.ts","presentational/table/ChakraTable.tsx","presentational/button/ChakraButton.tsx","presentational/numberinput/ProbabilityInput.tsx","atoms/states.ts","presentational/numberinput/ChakraNumberInput.tsx","containers/Gacha.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChakraHeader","as","align","justify","wrap","pt","pb","mb","bg","color","borderBottomWidth","mr","GiPresent","w","h","size","letterSpacing","useGacha","prob","onceStone","onceMoney","useState","totalGachas","setTotalGachas","totalStone","setTotalStone","totalMoney","setTotalMoney","num","rand","Math","random","ChakraTable","trialsNum","variant","isNumeric","ChakraButton","calc","colorScheme","onClick","ProbablityInput","setProb","onChange","value","Number","max","min","inputState","atomFamily","key","default","ChakraNumberInput","setValue","CalcGacha","useRecoilState","setOnceStone","setOnceMoney","totalGatchas","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QA0BeA,EAtBM,kBACnB,cAAC,IAAD,CACEC,GAAG,MACHC,MAAM,SACNC,QAAQ,gBACRC,KAAK,OACLC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAG,QACHC,MAAM,QACNC,kBAAkB,MAVpB,SAYE,eAAC,IAAD,CAAMR,MAAM,SAASS,GAAI,EAAzB,UACE,cAAC,IAAD,CAAMV,GAAIW,IAAWC,EAAG,EAAGC,EAAG,EAAGL,MAAM,QACvC,cAAC,IAAD,CAASR,GAAG,KAAKc,KAAK,KAAKC,cAAe,UAA1C,mC,OCiBSC,EAlCE,SACfC,EACAC,EACAC,GAGA,MAAsCC,mBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAoCF,mBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAuBA,MAAO,CAACL,EAAaE,EAAYE,EApBpB,WACX,IAAIE,EAAM,EACVL,GAAe,WACb,IAAIM,EAAuB,IAAhBC,KAAKC,SAChB,GAAIb,GAAQ,EACV,OAAO,EAET,KAAOW,EAAOX,GACZU,IACAC,EAAuB,IAAhBC,KAAKC,SAGd,OAAOH,KAETH,GAAc,kBAAMG,EAAMT,KAC1BQ,GAAc,kBAAMC,EAAMR,Q,QCAfY,EArBV,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWT,EAAd,EAAcA,WAAYE,EAA1B,EAA0BA,WAA1B,OACH,eAAC,IAAD,CAAOQ,QAAQ,UAAf,UACE,cAAC,IAAD,gCAEA,eAAC,IAAD,WACE,eAAC,IAAD,WACE,cAAC,IAAD,uCACA,eAAC,IAAD,CAAIC,WAAS,EAAb,UAAeF,GAAwB,EAAvC,eAEF,eAAC,IAAD,WACE,cAAC,IAAD,6CACA,eAAC,IAAD,CAAIE,WAAS,EAAb,UAAeX,GAA0B,EAAzC,eAEF,eAAC,IAAD,WACE,cAAC,IAAD,uCACA,eAAC,IAAD,CAAIW,WAAS,EAAb,UAAeT,GAA0B,EAAzC,sB,oCCPOU,EARkB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAClC,OACE,cAAC,IAAD,CAAQxB,EAAE,OAAOyB,YAAY,OAAOC,QAASF,EAA7C,2B,SCmBWG,EAlB0C,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC1D,OACE,eAAC,IAAD,CACEC,SAAU,SAACC,GACTF,EAAQG,OAAOD,KAEjBE,IAAK,IACLC,IAAK,EALP,UAOE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,IACA,cAAC,IAAD,W,QCpBKC,EAAaC,YAA0B,CAClDC,IAAK,cACLC,QAAS,ICsBIC,EAhB6C,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC7D,OACE,eAAC,IAAD,CACEV,SAAU,SAACC,GACTS,EAASR,OAAOD,KAFpB,UAKE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,IACA,cAAC,IAAD,WCgCOU,EA1CG,WAChB,MAAwBC,YAAeP,EAAW,gBAAlD,mBAAO7B,EAAP,KAAauB,EAAb,KACA,EAAkCa,YAAeP,EAAW,cAA5D,mBAAO5B,EAAP,KAAkBoC,EAAlB,KACA,EAAkCD,YAAeP,EAAW,cAA5D,mBAAO3B,EAAP,KAAkBoC,EAAlB,KACA,EAAqDvC,EACnDC,EACAC,EACAC,GAHF,mBAAOqC,EAAP,KAAqBjC,EAArB,KAAiCE,EAAjC,KAA6CW,EAA7C,KAMA,OACE,eAAC,IAAD,WACE,cAAC,EAAD,CACEJ,UAAWwB,EACXjC,WAAYA,EACZE,WAAYA,IAEd,eAAC,IAAD,CAAMnB,GAAI,EAAV,UACE,cAAC,IAAD,CAAQM,EAAE,QAAQL,GAAG,UAArB,SACE,cAAC,IAAD,CAAMC,MAAO,QAAb,+BAEF,cAAC,EAAD,CAAiBgC,QAASA,OAE5B,eAAC,IAAD,CAAMlC,GAAI,EAAV,UACE,cAAC,IAAD,CAAQM,EAAE,QAAQL,GAAG,UAArB,SACE,cAAC,IAAD,CAAMC,MAAO,QAAb,qDAEF,cAAC,EAAD,CAAmB2C,SAAUG,OAE/B,eAAC,IAAD,CAAMhD,GAAI,EAAV,UACE,cAAC,IAAD,CAAQM,EAAE,QAAQL,GAAG,UAArB,SACE,cAAC,IAAD,CAAMC,MAAO,QAAb,+CAEF,cAAC,EAAD,CAAmB2C,SAAUI,OAE/B,cAAC,IAAD,CAAKjD,GAAI,EAAGM,EAAE,OAAd,SACE,cAAC,EAAD,CAAcwB,KAAMA,UC5BbqB,EAXH,WACV,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,UCEOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7e275886.chunk.js","sourcesContent":["import React from \"react\";\nimport { Flex, Heading, Icon } from \"@chakra-ui/react\";\nimport { GiPresent } from \"react-icons/gi\";\n\nconst ChakraHeader = () => (\n  <Flex\n    as=\"nav\"\n    align=\"center\"\n    justify=\"space-between\"\n    wrap=\"wrap\"\n    pt={6}\n    pb={6}\n    mb={6}\n    bg=\"white\"\n    color=\"black\"\n    borderBottomWidth=\"1px\"\n  >\n    <Flex align=\"center\" mr={5}>\n      <Icon as={GiPresent} w={8} h={8} color=\"red\" />\n      <Heading as=\"h1\" size=\"lg\" letterSpacing={\"tighter\"}>\n        Gacha Simulator\n      </Heading>\n    </Flex>\n  </Flex>\n);\n\nexport default ChakraHeader;\n","import { useState } from \"react\";\n\nconst useGacha = (\n  prob: number,\n  onceStone: number,\n  onceMoney: number\n): [number, number, number, () => void] => {\n  // 確率を受け取り、ガチャ回数を返す\n  const [totalGachas, setTotalGachas] = useState(0);\n  const [totalStone, setTotalStone] = useState(0);\n  const [totalMoney, setTotalMoney] = useState(0);\n\n  // 最新の値が取れていない\n  const calc = () => {\n    var num = 1;\n    setTotalGachas(() => {\n      var rand = Math.random() * 100;\n      if (prob <= 0) {\n        return 0;\n      }\n      while (rand > prob) {\n        num++;\n        rand = Math.random() * 100;\n      }\n\n      return num;\n    });\n    setTotalStone(() => num * onceStone);\n    setTotalMoney(() => num * onceMoney);\n  };\n  // 最新の値が取れていない\n\n  //const calcTotalStone = () => setTotalStone(() => totalGachas * onceStone);\n  return [totalGachas, totalStone, totalMoney, calc];\n};\n\nexport default useGacha;\n","import React, { VFC } from \"react\";\nimport { TableCaption, Table, Tr, Td, Tbody } from \"@chakra-ui/react\";\n\nconst ChakraTable: VFC<{\n  trialsNum: number;\n  totalStone: number;\n  totalMoney: number;\n}> = ({ trialsNum, totalStone, totalMoney }) => (\n  <Table variant=\"striped\">\n    <TableCaption>Created by Rruryu</TableCaption>\n\n    <Tbody>\n      <Tr>\n        <Td>試行回数</Td>\n        <Td isNumeric>{trialsNum ? trialsNum : 0}回</Td>\n      </Tr>\n      <Tr>\n        <Td>合計課金石</Td>\n        <Td isNumeric>{totalStone ? totalStone : 0}個</Td>\n      </Tr>\n      <Tr>\n        <Td>合計金額</Td>\n        <Td isNumeric>{totalMoney ? totalMoney : 0}円</Td>\n      </Tr>\n    </Tbody>\n  </Table>\n);\n\nexport default ChakraTable;\n","import React, { VFC } from \"react\";\nimport { Button } from \"@chakra-ui/react\";\n\ntype Props = {\n  calc: () => void;\n};\n\nconst ChakraButton: VFC<Props> = ({ calc }) => {\n  return (\n    <Button w=\"100%\" colorScheme=\"blue\" onClick={calc}>\n      引く\n    </Button>\n  );\n};\n\nexport default ChakraButton;\n","import React, { VFC } from \"react\";\nimport {\n  NumberInputField,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInputStepper,\n  NumberInput,\n} from \"@chakra-ui/react\";\n\n\nconst ProbablityInput: VFC<{setProb:(p:number)=>void}> = ({ setProb }) => {\n  return (\n    <NumberInput\n      onChange={(value) => {\n        setProb(Number(value));\n      }}\n      max={100}\n      min={0}\n    >\n      <NumberInputField />\n      <NumberInputStepper>\n        <NumberIncrementStepper />\n        <NumberDecrementStepper />\n      </NumberInputStepper>\n    </NumberInput>\n  );\n};\n\nexport default ProbablityInput;\n","import { atomFamily } from \"recoil\";\n\nexport const inputState = atomFamily<number,string>({\n  key: \"probability\",\n  default: 0,\n});\n\n","import React, { VFC } from \"react\";\nimport {\n  NumberInputField,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInputStepper,\n  NumberInput,\n} from \"@chakra-ui/react\";\n\n\nconst ChakraNumberInput: VFC<{setValue:(p:number)=>void}> = ({ setValue }) => {\n  return (\n    <NumberInput\n      onChange={(value) => {\n        setValue(Number(value));\n      }}\n    >\n      <NumberInputField />\n      <NumberInputStepper>\n        <NumberIncrementStepper />\n        <NumberDecrementStepper />\n      </NumberInputStepper>\n    </NumberInput>\n  );\n};\n\nexport default ChakraNumberInput;\n","import React from \"react\";\nimport useGacha from \"../hooks/use-gacha\";\nimport ChakraTable from \"../presentational/table/ChakraTable\";\nimport { Box, Flex, Center, Text } from \"@chakra-ui/react\";\nimport ChakraButton from \"../presentational/button/ChakraButton\";\nimport ProbablityInput from \"../presentational/numberinput/ProbabilityInput\";\nimport { useRecoilState } from \"recoil\";\nimport { inputState } from \"../atoms/states\";\nimport ChakraNumberInput from \"../presentational/numberinput/ChakraNumberInput\";\n\nconst CalcGacha = () => {\n  const [prob, setProb] = useRecoilState(inputState(\"probability\"));\n  const [onceStone, setOnceStone] = useRecoilState(inputState(\"onceStone\"));\n  const [onceMoney, setOnceMoney] = useRecoilState(inputState(\"onceMoney\"));\n  const [totalGatchas, totalStone, totalMoney, calc] = useGacha(\n    prob,\n    onceStone,\n    onceMoney\n  );\n\n  return (\n    <Box>\n      <ChakraTable\n        trialsNum={totalGatchas}\n        totalStone={totalStone}\n        totalMoney={totalMoney}\n      />\n      <Flex mb={3}>\n        <Center w=\"150px\" bg=\"red.500\">\n          <Text color={\"white\"}>確率(%)</Text>\n        </Center>\n        <ProbablityInput setProb={setProb} />\n      </Flex>\n      <Flex mb={3}>\n        <Center w=\"150px\" bg=\"red.500\">\n          <Text color={\"white\"}>1回分の課金石</Text>\n        </Center>\n        <ChakraNumberInput setValue={setOnceStone} />\n      </Flex>\n      <Flex mb={3}>\n        <Center w=\"150px\" bg=\"red.500\">\n          <Text color={\"white\"}>1回分の値段</Text>\n        </Center>\n        <ChakraNumberInput setValue={setOnceMoney} />\n      </Flex>\n      <Box mb={3} w=\"100%\">\n        <ChakraButton calc={calc} />\n      </Box>\n    </Box>\n  );\n};\n\nexport default CalcGacha;\n","import React from \"react\";\nimport \"./App.css\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChakraHeader from \"./presentational/header/ChakraHeader\";\nimport CalcGacha from \"./containers/Gacha\";\nimport { RecoilRoot } from \"recoil\";\n\nconst App = () => {\n  return (\n    <RecoilRoot>\n      <ChakraProvider>\n        <ChakraHeader />\n        <CalcGacha />\n      </ChakraProvider>\n    </RecoilRoot>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}